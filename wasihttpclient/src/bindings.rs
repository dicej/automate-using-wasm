// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod dipankardas011 {
        #[allow(dead_code)]
        pub mod httpclient {
            #[allow(dead_code, clippy::all)]
            pub mod outgoing_http {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                /// *TODO(dipankar)!: need to enum types*/
                #[derive(Clone)]
                pub struct Response {
                    pub status_code: u16,
                    pub headers: _rt::String,
                    pub body: _rt::String,
                }
                impl ::core::fmt::Debug for Response {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("Response")
                            .field("status-code", &self.status_code)
                            .field("headers", &self.headers)
                            .field("body", &self.body)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct Reserror {
                    pub msg: _rt::String,
                }
                impl ::core::fmt::Debug for Reserror {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("Reserror").field("msg", &self.msg).finish()
                    }
                }
                impl ::core::fmt::Display for Reserror {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        write!(f, "{:?}", self)
                    }
                }
                impl std::error::Error for Reserror {}
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_request_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: *mut u8,
                    arg5: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let base4 = arg2;
                    let len4 = arg3;
                    let mut result4 = _rt::Vec::with_capacity(len4);
                    for i in 0..len4 {
                        let base = base4.add(i * 8);
                        let e4 = {
                            let l1 = *base.add(0).cast::<*mut u8>();
                            let l2 = *base.add(4).cast::<usize>();
                            let len3 = l2;
                            let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);

                            _rt::string_lift(bytes3)
                        };
                        result4.push(e4);
                    }
                    _rt::cabi_dealloc(base4, len4 * 8, 4);
                    let len5 = arg5;
                    let bytes5 = _rt::Vec::from_raw_parts(arg4.cast(), len5, len5);
                    let result6 =
                        T::get_request(_rt::string_lift(bytes0), result4, _rt::string_lift(bytes5));
                    let ptr7 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result6 {
                        Ok(e) => {
                            *ptr7.add(0).cast::<u8>() = (0i32) as u8;
                            let Response {
                                status_code: status_code8,
                                headers: headers8,
                                body: body8,
                            } = e;
                            *ptr7.add(4).cast::<u16>() = (_rt::as_i32(status_code8)) as u16;
                            let vec9 = (headers8.into_bytes()).into_boxed_slice();
                            let ptr9 = vec9.as_ptr().cast::<u8>();
                            let len9 = vec9.len();
                            ::core::mem::forget(vec9);
                            *ptr7.add(12).cast::<usize>() = len9;
                            *ptr7.add(8).cast::<*mut u8>() = ptr9.cast_mut();
                            let vec10 = (body8.into_bytes()).into_boxed_slice();
                            let ptr10 = vec10.as_ptr().cast::<u8>();
                            let len10 = vec10.len();
                            ::core::mem::forget(vec10);
                            *ptr7.add(20).cast::<usize>() = len10;
                            *ptr7.add(16).cast::<*mut u8>() = ptr10.cast_mut();
                        }
                        Err(e) => {
                            *ptr7.add(0).cast::<u8>() = (1i32) as u8;
                            let Reserror { msg: msg11 } = e;
                            let vec12 = (msg11.into_bytes()).into_boxed_slice();
                            let ptr12 = vec12.as_ptr().cast::<u8>();
                            let len12 = vec12.len();
                            ::core::mem::forget(vec12);
                            *ptr7.add(8).cast::<usize>() = len12;
                            *ptr7.add(4).cast::<*mut u8>() = ptr12.cast_mut();
                        }
                    };
                    ptr7
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get_request<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(8).cast::<*mut u8>();
                            let l2 = *arg0.add(12).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                            let l3 = *arg0.add(16).cast::<*mut u8>();
                            let l4 = *arg0.add(20).cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                        _ => {
                            let l5 = *arg0.add(4).cast::<*mut u8>();
                            let l6 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l5, l6, 1);
                        }
                    }
                }
                pub trait Guest {
                    fn get_request(
                        method: _rt::String,
                        headers: _rt::Vec<_rt::String>,
                        url: _rt::String,
                    ) -> Result<Response, Reserror>;
                }
                #[doc(hidden)]

                macro_rules! __export_dipankardas011_httpclient_outgoing_http_0_1_0_cabi{
        ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

          #[export_name = "dipankardas011:httpclient/outgoing-http@0.1.0#get-request"]
          unsafe extern "C" fn export_get_request(arg0: *mut u8,arg1: usize,arg2: *mut u8,arg3: usize,arg4: *mut u8,arg5: usize,) -> *mut u8 {
            $($path_to_types)*::_export_get_request_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4, arg5)
          }
          #[export_name = "cabi_post_dipankardas011:httpclient/outgoing-http@0.1.0#get-request"]
          unsafe extern "C" fn _post_return_get_request(arg0: *mut u8,) {
            $($path_to_types)*::__post_return_get_request::<$ty>(arg0)
          }
        };);
      }
                #[doc(hidden)]
                pub(crate) use __export_dipankardas011_httpclient_outgoing_http_0_1_0_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 24]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 24]);
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::string::String;

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    extern crate alloc as alloc_crate;
    pub use alloc_crate::alloc;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_http_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::dipankardas011::httpclient::outgoing_http::__export_dipankardas011_httpclient_outgoing_http_0_1_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::dipankardas011::httpclient::outgoing_http);
  )
}
#[doc(inline)]
pub(crate) use __export_http_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:http:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 342] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xdb\x01\x01A\x02\x01\
A\x02\x01B\x08\x01r\x03\x0bstatus-code{\x07headerss\x04bodys\x04\0\x08response\x03\
\0\0\x01r\x01\x03msgs\x04\0\x08reserror\x03\0\x02\x01ps\x01j\x01\x01\x01\x03\x01\
@\x03\x06methods\x07headers\x04\x03urls\0\x05\x04\0\x0bget-request\x01\x06\x04\x01\
-dipankardas011:httpclient/outgoing-http@0.1.0\x05\0\x04\x01$dipankardas011:http\
client/http@0.1.0\x04\0\x0b\x0a\x01\0\x04http\x03\0\0\0G\x09producers\x01\x0cpro\
cessed-by\x02\x0dwit-component\x070.208.1\x10wit-bindgen-rust\x060.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
